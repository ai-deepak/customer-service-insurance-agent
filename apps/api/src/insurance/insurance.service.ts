import { Injectable } from '@nestjs/common';

// Sample Data - In-memory storage (in production, this would come from a database)
const samplePolicies = {
  "POL-1001": {
    "user_id": "USER-001",
    "plan": "Gold",
    "collision_coverage": 50000,
    "roadside_assistance": true,
    "deductible": 500,
    "premium": 500.0
  },
  "POL-1002": {
    "user_id": "USER-002", 
    "plan": "Silver",
    "collision_coverage": 30000,
    "roadside_assistance": false,
    "deductible": 750,
    "premium": 350.0
  },
  "POL-1003": {
    "user_id": "USER-003",
    "plan": "Platinum",
    "collision_coverage": 100000,
    "roadside_assistance": true,
    "deductible": 250,
    "premium": 800.0
  }
};

const sampleClaims = {
  "98765": {
    "claim_id": "98765",
    "policy_id": "POL-1001",
    "status": "In Review",
    "last_updated": "2024-12-01",
    "damage_description": "Rear-end collision at traffic light",
    "vehicle": "2022 Toyota Camry"
  },
  "98766": {
    "claim_id": "98766", 
    "policy_id": "POL-1002",
    "status": "Approved",
    "last_updated": "2024-11-28",
    "damage_description": "Side impact from parking lot incident",
    "vehicle": "2021 Honda Civic"
  },
  "98767": {
    "claim_id": "98767",
    "policy_id": "POL-1003", 
    "status": "Submitted",
    "last_updated": "2024-12-02",
    "damage_description": "Hail damage to roof and hood",
    "vehicle": "2023 BMW X5"
  }
};

@Injectable()
export class InsuranceService {
  
  // Helper functions
  private getPolicyByUserId(userId: string) {
    for (const [policyId, policy] of Object.entries(samplePolicies)) {
      if (policy.user_id === userId) {
        return { policyId, policy };
      }
    }
    return { policyId: null, policy: null };
  }

  private calculateNewPremium(currentCoverage: number, newCoverage: number, currentPremium: number): number {
    // Simple linear calculation: premium increases proportionally with coverage
    const coverageRatio = newCoverage / currentCoverage;
    const newPremium = currentPremium * coverageRatio;
    return Math.round(newPremium * 100) / 100; // Round to 2 decimal places
  }

  // Policy details
  async getPolicyDetails(userId: string) {
    const { policyId, policy } = this.getPolicyByUserId(userId);
    
    if (!policy) {
      throw new Error("Policy not found for user");
    }
    
    return {
      plan: policy.plan,
      collision_coverage: policy.collision_coverage,
      roadside_assistance: policy.roadside_assistance,
      deductible: policy.deductible,
      user_id: policy.user_id,
      policy_id: policyId
    };
  }

  // Claim status
  async getClaimStatus(claimId: string) {
    const claim = sampleClaims[claimId];
    
    if (!claim) {
      throw new Error("Claim not found");
    }
    
    return {
      claim_id: claim.claim_id,
      status: claim.status,
      last_updated: claim.last_updated
    };
  }

  // Submit claim
  async submitClaim(claimRequest: {
    policy_id: string;
    damage_description: string;
    vehicle: string;
    photos?: string[];
  }) {
    // Validate policy exists
    if (!samplePolicies[claimRequest.policy_id]) {
      throw new Error("Policy not found");
    }
    
    // Generate new claim ID (in production, this would be generated by the database)
    const newClaimId = Math.random().toString(36).substring(2, 10).toUpperCase();
    
    // Create new claim
    const newClaim = {
      claim_id: newClaimId,
      policy_id: claimRequest.policy_id,
      status: "Submitted",
      last_updated: new Date().toISOString().split('T')[0],
      damage_description: claimRequest.damage_description,
      vehicle: claimRequest.vehicle,
      photos: claimRequest.photos || []
    };
    
    // Store the claim (in production, this would be saved to database)
    sampleClaims[newClaimId] = newClaim;
    
    return {
      claim_id: newClaimId,
      message: "Claim submitted successfully."
    };
  }

  // Calculate premium
  async calculatePremium(premiumRequest: {
    policy_id: string;
    current_coverage: number;
    new_coverage: number;
  }) {
    // Validate policy exists
    if (!samplePolicies[premiumRequest.policy_id]) {
      throw new Error("Policy not found");
    }
    
    const policy = samplePolicies[premiumRequest.policy_id];
    const currentPremium = policy.premium;
    
    // Calculate new premium
    const newPremium = this.calculateNewPremium(
      premiumRequest.current_coverage,
      premiumRequest.new_coverage,
      currentPremium
    );
    
    return {
      policy_id: premiumRequest.policy_id,
      current_premium: currentPremium,
      new_premium: newPremium
    };
  }

  // Get all policies (for admin purposes)
  async getAllPolicies() {
    return Object.values(samplePolicies);
  }

  // Get all claims (for admin purposes)
  async getAllClaims() {
    return Object.values(sampleClaims);
  }
}
